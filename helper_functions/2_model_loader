from transformers import AutoTokenizer, AutoModelForCausalLM
import torch

class ModelWrapper(torch.nn.Module):
    """
    Models loaded from Hugging Face transformers lib, not always in a standard nn.Module format.
    """
    def __init__(self, model):
        super().__init__()
        self.model = model
        
    def forward(self, input_ids):
        return self.model(input_ids=input_ids)

def load_model_tokenizer(model_name: str, fp_precision: str = "float32"):
    
    tokenizer = AutoTokenizer.from_pretrained(model_name)
    model = AutoModelForCausalLM.from_pretrained(model_name, torch_dtype=dtype)
    model.eval()
    
    if fp_precision == "float8":
        raise ValueError("float8 not supported.")
    elif fp_precision == "float16":
        dtype = torch.float16
    elif fp_precision == "bfloat16":
        dtype = torch.bfloat16
        raise ValueError("bfloat16 not supported.")
    else:
        dtype = torch.float32  
        
    return model, tokenizer
